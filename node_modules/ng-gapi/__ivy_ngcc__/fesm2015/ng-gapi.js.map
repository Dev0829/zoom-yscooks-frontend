{"version":3,"file":"ng-gapi.js","sources":["../../src/config/GoogleApiConfig.ts","../../src/GoogleApiService.ts","../../src/GoogleAuthService.ts","../../src/GoogleApiModule.ts","../../src/ng-gapi.ts"],"names":[],"mappings":"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","sourcesContent":["import ClientConfig = gapi.auth2.ClientConfig;\n\nexport interface NgGapiClientConfig extends ClientConfig {\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","import {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {GoogleApiConfig, NgGapiClientConfig} from './config/GoogleApiConfig';\nimport {Observable, Observer} from 'rxjs';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private config: GoogleApiConfig;\n  private gapiLoaded: boolean;\n  private node: HTMLScriptElement;\n  private observers: Observer<boolean>[] = [];\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      if (this.gapiLoaded) {\n        observer.next(true);\n        observer.complete();\n      } else if (!this.node) {\n        /**\n         * script element has not yet been added to document\n         */\n        this.node = document.createElement('script');\n        this.node.async = true;\n        this.node.src = this.gapiUrl;\n        this.node.type = 'text/javascript';\n        this.node.onload = () => {\n          this.gapiLoaded = true;\n          while (this.observers.length) {\n            const observer = this.observers.shift();\n            observer.next(true);\n            observer.complete();\n          }\n          this.node = undefined;\n        };\n        this.node.onerror = () => {\n          this.node = undefined;\n        }\n        document.getElementsByTagName('head')[0].appendChild(this.node);\n      } else {\n        /**\n         * script is in the middle of being loaded\n         */\n        this.observers.push(observer);\n      }\n    });\n  }\n}\n","import {Injectable, Inject} from '@angular/core';\nimport {GoogleApiService} from './GoogleApiService';\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport {Observable, Observer, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\n@Injectable()\nexport class GoogleAuthService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(@Inject(GoogleApiService) private googleApi: GoogleApiService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGapiAuth().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGapiAuth()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGapiAuth(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import {ModuleWithProviders, NgModule, Provider} from '@angular/core';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {GoogleApiService} from './GoogleApiService';\n\n@NgModule()\nexport class GoogleApiModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders<GoogleApiModule> {\n    return {\n      ngModule: GoogleApiModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleAuthService,\n        GoogleApiService\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}